/// <reference path="../../node_modules/reflect-metadata/reflect-metadata.d.ts" />
/// <reference path="../../typings/node/node.d.ts" />

import {ParamTypeCustom} from './param-type-custom';
import * as Utils from '../../utils/utils';
//import * as node from require('node');

interface FieldMetaData {
    fields: { [key: string]: MetaData };
}

interface DecoratorMetaData {
    decorator: { [key: string]: FieldMetaData };
}

export interface GlobalExtended extends NodeJS.Global {
    models: { [key: string]: DecoratorMetaData };
}

export interface IFieldParams {
    itemType?: any,
    primary?: boolean,
    autogenerated?: boolean
}

export interface IAssociationParams {
    rel: string,
    itemType: Object,
    embedded: boolean,
    persist: boolean
}


var globalExt: GlobalExtended = <any>global;

//export interface IMetaTarget extends Object {
//    decorators: {};
//}

export enum DecoratorType {
    CLASS,
    METHOD,
    PROPERTY
}

export var modelLinks: { [key: string]: any } = {};

export function updateModelLinks(metaData: MetaData, embedded: boolean) {
    var param = <ParamTypeCustom><any>metaData.propertyType;
    if (param.rel) {
        var parent = getMetaData((<any>metaData.target).prototype || metaData.target, "document").params['name']
        var child = getMetaData((<any>param.itemType).prototype || param.itemType, "document").params['name']
        modelLinks[child] = modelLinks[child] || [];
        modelLinks[child].push({ metaData: metaData, embedded: embedded });
    }
}

export class MetaData {
    target: Object;
    propertyKey: string;
    decorator: string;
    propertyType: ParamTypeCustom;
    params: IFieldParams | IAssociationParams;
    decoratorType: DecoratorType;

    constructor(target: Object, decorator: string, decoratorType: DecoratorType, params: {}, propertyKey: string) {
        this.target = target;
        this.propertyKey = propertyKey;
        this.decorator = decorator;
        this.decoratorType = decoratorType;
        this.params = params;
        var type = Reflect.getMetadata("design:type", target, propertyKey);

        if (type === Array && !params) {
            throw TypeError;
        }
        // If it is not relation type/array type
        //if (type !== Array && !(params && (<any>params).rel)) {
        //    this.propertyType = new ParamTypeCustom((<any>params).rel, this.propertyType, (<any>params).itemType);
        //}

        if ((params && (<any>params).rel) || type === Array) {
            this.propertyType = new ParamTypeCustom((<any>params).rel, (<any>params).itemType, type === Array, (<any>params).embedded, ((<any>params).level ? (<any>params).level : -1));
        } else {
            this.propertyType = new ParamTypeCustom(null, type, false, false, -1);
        }
    }
}

export function addMetaData(target: Object, decorator: string, decoratorType: DecoratorType, params: {}, propertyKey?: string) {
    if (!target) {
        throw TypeError;
    }
    // property/method decorator with no key passed
    if (arguments.length === 5 && !propertyKey) {
        throw TypeError;
    }
    propertyKey = propertyKey || '__';

    globalExt.models = globalExt.models || <any>{};

    var name = this.getModelNameFromObject(target);
    globalExt.models[name] = globalExt.models[name] || <any>{};
    globalExt.models[name].decorator = globalExt.models[name].decorator || <any>{};
    globalExt.models[name].decorator[decorator] = globalExt.models[name].decorator[decorator] || <any>{};
    globalExt.models[name].decorator[decorator].fields = globalExt.models[name].decorator[decorator].fields || <any>{};

    if (!globalExt.models[name].decorator[decorator].fields[propertyKey]) {
        var metData: MetaData = new MetaData(target, decorator, decoratorType, params, propertyKey);
        globalExt.models[name].decorator[decorator].fields[propertyKey] = metData;
    }
}

export function getMetaData(target: Object, decorator: string, propertyKey?: string): MetaData {
    if (!target || !decorator) {
        throw TypeError;
    }

    propertyKey = propertyKey || '__';
    var name = this.getModelNameFromObject(target);
    if (globalExt.models[name]) {
        if (globalExt.models[name].decorator[decorator]) {
            return globalExt.models[name].decorator[decorator].fields[propertyKey];
        }
    }
    return null;
}

export function getMetaDataForField(target: Object, propertyKey?: string): MetaData {
    if (!target) {
        throw TypeError;
    }

    propertyKey = propertyKey || '__';
    var name = this.getModelNameFromObject(target);
    if (globalExt.models[name]) {
        for (var dec in globalExt.models[name].decorator) {
            for (var field in globalExt.models[name].decorator[dec].fields) {
                if (field == propertyKey) {
                    return globalExt.models[name].decorator[dec].fields[field];
                }
            }
        }
    }
    return null;
}

export function getAllMetaDataForDecorator(target: Object, decorator: string): { [key: string]: MetaData } {
    if (!target || !decorator) {
        throw TypeError;
    }

    var name = this.getModelNameFromObject(target);

    if (globalExt.models[name]) {
        return globalExt.models[name].decorator[decorator].fields;
    }

    return null;
}

export function getPrimaryKeyMetadata(target: Object): MetaData {
    if (!target) {
        throw TypeError;
    }

    var name = this.getModelNameFromObject(target);

    if (!globalExt.models[name]) {
        return null;
    }
    var allFields = globalExt.models[name].decorator['field'].fields;
    for (var field in allFields) {
        if ((<any>allFields[field].params).primary) {
            return allFields[field];
        }
    }
    return null;
}

export function getAllMetaDataForField(target: Object, propertyKey?: string): Array<MetaData> {
    if (!target) {
        throw TypeError;
    }

    propertyKey = propertyKey || '__';
    var name = this.getModelNameFromObject(target);
    if (!globalExt.models[name]) {
        return null;
    }
    var metadataArr: Array<MetaData> = [];
    for (var dec in globalExt.models[name].decorator) {
        for (var field in globalExt.models[name].decorator[dec].fields) {
            if (field == propertyKey) {
                metadataArr.push(globalExt.models[name].decorator[dec].fields[field]);
            }
        }
    }
    return metadataArr;
}

export function getAllMetaDataForAllDecorator(target: Object): { [key: string]: Array<MetaData> } {
    if (!target) {
        throw TypeError;
    }

    var meta: { [key: string]: Array<MetaData> } = <any>{};
    var name = this.getModelNameFromObject(target);

    if (globalExt.models[name]) {
        for (var dec in globalExt.models[name].decorator) {
            for (var field in globalExt.models[name].decorator[dec].fields) {
                var metaData: MetaData = globalExt.models[name].decorator[dec].fields[field];
                meta[field] ? meta[field].push(metaData) : meta[field] = [metaData];
            }
        }
    }

    return meta;
}

export function getPrimaryKeyOfModel(target: Object): string {
    var modelName = this.getModelNameFromObject(target);

    if (globalExt.models[modelName]) {
        for (var dec in globalExt.models[modelName].decorator) {
            for (var key in globalExt.models[modelName].decorator[dec].fields) {
                var meta: MetaData = globalExt.models[modelName].decorator[dec].fields[key];
                if ((<any>meta.params).primary) {
                    return key;
                }
            }
        }
    }
    return null;
}

export function getModelNameFromObject(obj: any): string {
    if (obj.default) {
        return obj.default.name;
    }
    if (obj.prototype) {
        obj = obj.prototype;
    }
    if (obj.constructor) {
        return (obj.constructor).name;
    }
    return obj.name;
}


export function getAllRelationsForTarget(target: Object): Array<MetaData> {
    if (!target) {
        throw TypeError;
    }

    var name = this.getModelNameFromObject(target);
    if (!globalExt.models[name]) {
        return null;
    }

    Enumerable.from(globalExt.models)
        .forEach((keyVal, index) => {

        });
    var metadataArr: Array<MetaData> = [];
    for (var dec in globalExt.models[name].decorator) {
        for (var field in globalExt.models[name].decorator[dec].fields) {
                metadataArr.push(globalExt.models[name].decorator[dec].fields[field]);
        }
    }
    return metadataArr;
}